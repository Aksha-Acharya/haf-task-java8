package com.employee.EmpData.exception;

import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.validation.FieldError;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.client.HttpClientErrorException;

@ControllerAdvice
public class GlobalExceptionHandler {

	@ExceptionHandler(EmployeeNotFoundException.class)
	@ResponseStatus(HttpStatus.NOT_FOUND)
    public ResponseEntity<ErrorResponse> handleEmpNotFoundException(EmployeeNotFoundException exc) {
        ErrorResponse error = new ErrorResponse(); 
        error.setStatus(HttpStatus.NOT_FOUND.value());
        error.setMessage(exc.getMessage());
        error.setTimeStamp(System.currentTimeMillis());
        return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
    }

	@ExceptionHandler(MethodArgumentNotValidException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public Map<String, String> handleValidationExceptions(MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        return errors;
    }	

	 
	@ExceptionHandler(Exception.class)
	@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
	public ResponseEntity<ErrorResponse> handleException(Exception exc) {
		ErrorResponse error = new ErrorResponse();
		error.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
		error.setMessage(exc.getMessage());
		error.setTimeStamp(System.currentTimeMillis());
		return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
//	 @ExceptionHandler(AccessDeniedException.class)
//	 @ResponseStatus(HttpStatus.NOT_FOUND)
//	    public ResponseEntity<Object> handleAccessDeniedException(AccessDeniedException ex) {
//	        // Customize your response for access denied exception here
//	        return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Access Denied: " + ex.getMessage());
//	    }
//	
//	@ExceptionHandler(AccessDeniedException.class)
//   @ResponseStatus(HttpStatus.FORBIDDEN)
//   public ResponseEntity<ErrorResponse> handleAccessDeniedException(AccessDeniedException ex) {
//		 ErrorResponse error = new ErrorResponse(); 
//	        error.setStatus(HttpStatus.FORBIDDEN.value());
//	        error.setMessage(ex.getMessage());
//	        error.setTimeStamp(System.currentTimeMillis());
//	        return new ResponseEntity<>(error, HttpStatus.FORBIDDEN);
//   }
//	
	
	 
//	@ExceptionHandler(HttpRequestMethodNotSupportedException.class)
//    public ResponseEntity<String> handleMethodNotSupportedException(HttpRequestMethodNotSupportedException ex) {
//        String message = "Request method '" + ex.getMethod() + "' is not supported.Please provide Id to "+ex.getMethod() +" the data";
//        return ResponseEntity.status(HttpStatus.METHOD_NOT_ALLOWED).body(message);
//    }
//	
//	@ExceptionHandler(HttpClientErrorException.Unauthorized.class)
//    public ResponseEntity<String> handleUnauthorizedException(HttpClientErrorException.Unauthorized ex) {
//        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Unauthorized access");
//    }
//	
//	 @ExceptionHandler(AccessDeniedException.class)
//	    public ResponseEntity<String> handleAccessDeniedException(AccessDeniedException ex) {
//	        return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Access Forbidden: " + ex.getMessage());
//	    }

}
